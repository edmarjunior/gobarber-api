## YARN
	# baixar (site atual: https://classic.yarnpkg.com/en/) e instalar o yarn como gerenciador de pacotes
	# yarn (para baixar as dependencias)
	# yarn dev (para iniciar a aplicação com nodemon)

## DOCKER
	# docker ps -a (listar todos containers)
	# docker ps (lista somente os containers que estão sendo executados)
	# docker run --name database -e POSTGRES_PASSWORD=docker -p 5432:54322 -d postgres (criar um container contendo 1 imagem do postgres)
	# docker stop database (parando o container executado acima)
	# docker start database (inicinando o container)
	# docker container rm 70155288734a (remove o container com o id 70155288734a)


## SEQUELIZE
	# yarn sequelize migration:create --name=create-files (criar migration para tabela de arquivos)
	# yarn sequelize db:migrate (rodar as migrations na base de dados)


## DATE-FNS
	# yarn add date-fns@next (para instalar biblioteca para trabalhar com datas, obs: o @next é só pra pegar a versão mais recente)


## MONGODB
	# docker run --name mongobarber -p 27017:27017 -d -t mongo (criar container com o mongoDb)
	# yarn add mongoose (instalar ORM para trabalhar com o mongo)


## NODEMAILER (para envio de e-mail)
	# yarn add nodemailer


## HANDLEBARS (para criação de templates de e-mail)
	# yarn add express-handlebars nodemailer-express-handlebars (integração do handlebars com o express, e integração do nodemailers com o express-handlebars)

## REDIS
	# docker run --name redisbarber -p 6379:6379 -d -t redis:alpine
	# yarn add bee-queue (para criar filas)
	# yarn queue (script criado no package.json para processar as filas)

## SENTRY (para monitorar erros em ambiente de produção)
	# yarn add @sentry/node@5.13.0
	# yarn add express-async-errors (para o express capturar erros em métodos async)
	# yarn add youch (para retornar json de internal server error)

## Environment (.env)
	# yarn add dotenv (para utilizar a variavel global process do node importando no app.js)

## TODO:
	# listar notificações do usuário prestador de serviço
